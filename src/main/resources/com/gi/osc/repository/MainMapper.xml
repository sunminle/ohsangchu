<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    <mapper namespace="com.gi.osc.repository.MainMapper">
    	
    	<!--
    	<select id="searchList" parameterType="com.gi.osc.bean.StoreDTO" resultType="com.gi.osc.bean.StoreDTO">
    		 select * from dbo.store where delete_yn='N' 
    		 <choose>
    		 	<when test="type !=null and type.equals('storename')">
    		 	and storename like CONCAT('%', #{keyword}, '%')
    		 	</when>
    		 </choose>
    	</select>
    	-->
    	<!--  상품검색 -->
    	<select id="searchProductsByName" parameterType="String" resultType="com.gi.osc.bean.ProductDTO">
			    SELECT a.*, p.*
			    FROM posting a
			    LEFT JOIN (
			        SELECT postingid, MAX(productname) AS productname
			        FROM product
			        GROUP BY postingid
			    ) p ON a.id = p.postingid
			    <where>
			        <if test="searchKeyword != null and searchKeyword != ''">
			            AND (p.productname LIKE '%' || #{searchKeyword, jdbcType=VARCHAR} || '%'
			            OR a.title LIKE '%' || #{searchKeyword, jdbcType=VARCHAR} || '%'
			            OR a.content LIKE '%' || #{searchKeyword, jdbcType=VARCHAR} || '%')
			        </if>
			    </where>
		</select>

		
		
	<!-- 상점 검색 -->
		<select id="searchStoreByName" parameterType="String" resultType="com.gi.osc.bean.StoreDTO">
   			select s.*, u.* 
			from users u
			join store s on u.id = s.userId(+)
			<where>
				<if test="searchKeyword != null and searchKeyword != ''">
 					AND (s.storeName LIKE '%' || #{searchKeyword, jdbcType=VARCHAR} || '%'
       				OR u.nickname LIKE '%' || #{searchKeyword, jdbcType=VARCHAR} || '%')
        		</if>
        	</where>
		</select>
	 	
	 	<!-- 판매량이 높은 제품 조회 -->
		<select id="countPopularProducts" resultType="com.gi.osc.bean.PaymentDTO">
			<![CDATA[
				 SELECT id, thumnail, title, storename, profile
			FROM (
			    SELECT subquery_alias.*, ROWNUM as rn
			    FROM (
			        SELECT p.id, p.thumnail, p.title, s.storename, u.profile,
			               ROW_NUMBER() OVER (ORDER BY totalCount DESC) AS row_num
			        FROM (
			            SELECT po.id, po.thumnail, po.title, COUNT(*) AS totalCount, po.storeid
			            FROM payment pm
			            JOIN posting po ON pm.postingId = po.id
			            GROUP BY po.id, po.thumnail, po.title, po.storeid
			            HAVING COUNT(*) > 1
			        ) subquery_alias
			        JOIN store s ON subquery_alias.storeid = s.id
			        JOIN users u ON s.userid = u.id
			        JOIN posting p ON subquery_alias.id = p.id
			    ) subquery_alias
			    WHERE row_num <= 6
			)
			WHERE rn <= 6
				]]>
		</select>

		<select id="searchHashtagByName" parameterType="java.lang.String" resultType="com.gi.osc.bean.HashtagDTO">
		    SELECT h.hashtagName, p.*
		    FROM hashtag_posting hp
		    JOIN hashtag h ON hp.hashtagId = h.id
		    JOIN posting p ON hp.postingId = p.id
		    <where>
		        <if test="searchKeyword != null and searchKeyword != ''">
		             AND h.hashtagName = #{searchKeyword, jdbcType=VARCHAR}
		        </if>
		    </where>
		</select>

	<!--
	<select id="getCategoriesByRange" resultType="com.gi.osc.bean.CategoryDTO">
        SELECT c.categoryName, p.title, p.thumnail, p.id, p.categoryId
        FROM category c
        JOIN posting p ON c.id = p.categoryId
        WHERE c.ID BETWEEN 100 AND 699
    </select>
    -->

		<select id="getCategories" resultType="com.gi.osc.bean.CategoryDTO">
			select * from category
		</select>
		
		<select id="getPostingsByCategoryId" resultType="com.gi.osc.bean.PostingDTO" parameterType="Long">
		    SELECT p.id, p.title, p.thumnail
		    FROM posting p
		    JOIN category c ON p.categoryId = c.id
		    WHERE c.id = #{categoryId}
		</select>

	    <!-- 검색어를 popular_word 테이블에 삽입하는 쿼리문 -->
	    <insert id="insertKeyword" parameterType="String">
	        INSERT INTO popular_word (pwWord, pwDate)
	        VALUES (#{keyword}, SYSDATE)
	    </insert>
	    
	    <!-- 중복되는 단어가 많은 순으로 정렬하여 가져오는 쿼리 -->
		<select id="selectPopularWords" resultType="map">
			<![CDATA[
			    SELECT pwWord
			    FROM (
			        SELECT pwWord, COUNT(*) AS wordCount
			        FROM popular_word
			        GROUP BY pwWord
			        ORDER BY COUNT(*) DESC
			    )
			    WHERE ROWNUM <= 10
			    ]]>
		</select>
	    




    </mapper>